name: Docker Deploy
description: Deploying a web server on an EC2 instance using Docker
inputs:
    aws-access-key-id:
        required: true
    aws-secret-access-key:
        required: true
    aws-region:
        required: false
        default: ap-northeast-2
    ecr-repository:
        required: true
    ecr-image-tag:
        required: false
        default: latest
    ecr-dockerfile-name:
        required: false
        default: Dockerfile
    docker-container-port:
        required: true
    docker-container-name:
        required: true
    use-env-file:
        required: false
        default: false
    env-file-name:
        required: false
        default: .env
    ssh-host:
        required: true
    ssh-username:
        required: true
    ssh-private-key:
        required: true
    ssh-port:
        required: false
        default: 22

runs:
    using: composite
    steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
              aws-access-key-id: ${{ inputs.aws-access-key-id }}
              aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
              aws-region: ${{ inputs.aws-region }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Make Docker Image Name
          env:
              registry: ${{ steps.login-ecr.outputs.registry }}
              repository: ${{ inputs.ecr-repository }}
              image_tag: ${{ inputs.ecr-image-tag }}
          run: echo "docker_image=$registry/$repository:$image_tag" >> $GITHUB_ENV
          shell: bash

        # - name: Build, tag, and push docker image to Amazon ECR
        #   env:
        #       docker_image: ${{ env.docker_image }}
        #       dockerfile: ${{ inputs.ecr-dockerfile-name }}
        #   run: |
        #       docker buildx build --platform=linux/amd64 -t $docker_image -f $dockerfile .
        #       docker push $docker_image
        #   shell: bash

        - name: Run Server
          uses: appleboy/ssh-action@v1.0.3
          env:
              IMAGE_NAME: ${{ env.docker_image }}
              CONTAINER_PORT: ${{ inputs.docker-container-port }}
              CONTAINER_NAME: ${{ inputs.docker-container-name }}
              USE_ENV_FILE: ${{ inputs.use-env-file }}
              ENV_FILE_NAME: ${{ inputs.env-file-name }}
          with:
              host: ${{ inputs.ssh-host }}
              username: ${{ inputs.ssh-username }}
              key: ${{ inputs.ssh-private-key }}
              port: ${{ inputs.ssh-port }}
              envs: IMAGE_NAME,CONTAINER_PORT,CONTAINER_NAME,USE_ENV_FILE,ENV_FILE_NAME
              script_stop: true
              debug: true
              script: |
                  if [ "$USE_ENV_FILE" = true ]; then
                    ENV_FILE_OPTION="--env-file=$ENV_FILE_NAME"
                  else
                    ENV_FILE_OPTION=""
                  fi

                  docker stop $(docker ps -qa ) 2>/dev/null \
                  &&  docker rm $(docker ps -qa ) 2>/dev/null \
                  && docker pull $IMAGE_NAME
              #   docker run -d -p 80:$CONTAINER_PORT --name $CONTAINER_NAME $ENV_FILE_OPTION $IMAGE_NAME
              #   docker image prune -fa 2>/dev/null
