name: Docker Deploy
description: Deploying a web server on an EC2 instance using Docker
inputs:
    aws-access-key-id:
        required: true
    aws-secret-access-key:
        required: true
    aws-region:
        required: false
        default: ap-northeast-2
    ecr-repository:
        required: true
    ecr-image-tag:
        required: false
        default: latest
    docker-build-platforms:
        required: false
        default: linux/amd64
    docker-context:
        required: false
        default: .
    docker-file-location:
        required: false
        default: ./Dockerfile
    docker-container-port:
        required: true
    docker-container-name:
        required: true
    use-env-file:
        required: false
        default: false
    env-file-name:
        required: false
        default: .env
    ssh-host:
        required: true
    ssh-username:
        required: true
    ssh-private-key:
        required: true
    ssh-port:
        required: false
        default: 22

runs:
    using: composite
    steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
              aws-access-key-id: ${{ inputs.aws-access-key-id }}
              aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
              aws-region: ${{ inputs.aws-region }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Make Docker Image Name
          env:
              registry: ${{ steps.login-ecr.outputs.registry }}
              repository: ${{ inputs.ecr-repository }}
              image_tag: ${{ inputs.ecr-image-tag }}
          run: echo "docker_image=$registry/$repository:$image_tag" >> $GITHUB_ENV
          shell: bash

        - name: Expose actions cache variables
          uses: actions/github-script@v7
          with:
              script: |
                  core.exportVariable('ACTIONS_CACHE_URL', process.env['ACTIONS_CACHE_URL'])
                  core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env['ACTIONS_RUNTIME_TOKEN'])

        - name: Docker Build & Push
          env:
              platforms: ${{ inputs.docker-build-platforms }}
              docker_image: ${{ env.docker_image }}
              docker_file_location: ${{ inputs.docker_file_location }}
              docker_context: ${{ inputs.docker_context }}
          run: |
              docker buildx create --name docker-build --driver docker-container --use

              docker buildx build --push --platform=$platforms -t $docker_image -f $docker_file_location \
              --cache-to type=gha,mode=max \
              --cache-from type=gha \
              --provenance=false $docker_context
          shell: bash

        - name: Run Server
          uses: appleboy/ssh-action@v1.0.3
          env:
              IMAGE_NAME: ${{ env.docker_image }}
              CONTAINER_PORT: ${{ inputs.docker-container-port }}
              CONTAINER_NAME: ${{ inputs.docker-container-name }}
              USE_ENV_FILE: ${{ inputs.use-env-file }}
              ENV_FILE_NAME: ${{ inputs.env-file-name }}
          with:
              host: ${{ inputs.ssh-host }}
              username: ${{ inputs.ssh-username }}
              key: ${{ inputs.ssh-private-key }}
              port: ${{ inputs.ssh-port }}
              envs: IMAGE_NAME,CONTAINER_PORT,CONTAINER_NAME,USE_ENV_FILE,ENV_FILE_NAME
              script_stop: true
              script: |
                  ENV_FILE_OPTION=""

                  if [ "$USE_ENV_FILE" = "true" ]; then
                    ENV_FILE_OPTION="--env-file=$ENV_FILE_NAME"
                  fi

                  CONTAINER_IDS=$(docker ps -qa)

                  if [ -n "$CONTAINER_IDS" ]; then
                    docker stop $(docker ps -aq) && docker rm $(docker ps -aq)
                  fi

                  docker pull $IMAGE_NAME \
                  && docker run -d -p 80:$CONTAINER_PORT $ENV_FILE_OPTION --name $CONTAINER_NAME $IMAGE_NAME \
                  && docker image prune -fa
